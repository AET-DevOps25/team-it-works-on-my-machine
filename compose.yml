services:
  client:
    image: ghcr.io/aet-devops25/team-it-works-on-my-machine/client:latest
    build:
      context: ./client
      dockerfile: Dockerfile
    environment:
        - ASSET_DIR=/usr/share/nginx/html
        - APP_PREFIX=PREFIX_
        - PREFIX_GH_CONNECTOR_URL=${GH_CONNECTOR_URL}
        - PREFIX_GH_OAUTH_CLIENT_ID=${GH_OAUTH_CLIENT_ID}
    ports:
      - "${CLIENT_PORT}:80"
    depends_on:
     - gh-connector
    restart: unless-stopped

  gh-connector:
    image: ghcr.io/aet-devops25/team-it-works-on-my-machine/gh-connector:latest
    build:
      context: ./gh-connector
      dockerfile: Dockerfile
    ports:
      - "${GH_CONNECTOR_PORT}:3000"
    environment:
      # Since we call container -> container we use the internal hostname
      - CLIENT_URL=${CLIENT_URL}
      - GENAI_URL=http://genai-python:${GENAI_PORT}
      - USERS_URL=http://users:${USERS_PORT}
      - GH_OAUTH_CLIENT_ID=${GH_OAUTH_CLIENT_ID}
      - GH_OAUTH_CLIENT_SECRET=${GH_OAUTH_CLIENT_SECRET}
    restart: unless-stopped

  genai-python:
    image: ghcr.io/aet-devops25/team-it-works-on-my-machine/genai:latest
    build:
      context: ./genai
      dockerfile: Dockerfile
    ports:
      - "${GENAI_PORT}:3001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GENAI_URL=${GENAI_URL}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - QDRANT_URL=${QDRANT_URL}
    restart: unless-stopped

  users:
    image: ghcr.io/aet-devops25/team-it-works-on-my-machine/users:latest
    build:
      context: ./users
      dockerfile: Dockerfile
    ports:
      - "${USERS_PORT}:3002"
    depends_on:
      - users-db
    environment:
      - USERS_DB_HOST=users-db
      - USERS_DB_USERNAME=${USERS_DB_USERNAME}
      - USERS_DB_PASSWORD=${USERS_DB_PASSWORD}
    restart: unless-stopped

  users-db:
    image: postgres:15-alpine
    ports:
      - "${USERS_DB_PORT}:5432"
    volumes:
      - users-db-storage:/var/lib/postgresql/data
    environment:
      -  POSTGRES_DB=users
      -  POSTGRES_USER=${USERS_DB_USERNAME}
      -  POSTGRES_PASSWORD=${USERS_DB_PASSWORD}

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./prometheus/prometheus.local.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=logsInExplore
      - GF_LOG_CONSOLECOLORS=true
      - PROMETHEUS_URL=http://prometheus:${PROMETHEUS_PORT}
      - LOKI_URL=http://loki:${LOKI_PORT}
    # entrypoint: ["sh", "-c", "/etc/grafana/provisioning/init_grafana.sh"]
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/promtail.yml:/etc/promtail/promtail.yml
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "${LOKI_PORT}:9092"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
    command: -config.file=/etc/loki/loki-config.yaml
    restart: unless-stopped


volumes:
  users-db-storage:
  prometheus_data:
  grafana-storage:
  loki-storage:
  promtail-storage:


